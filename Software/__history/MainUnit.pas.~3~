unit MainUnit;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, SPComm, Registry, Vcl.StdCtrls,
  System.StrUtils, GetCoreTempInfoDelphi, Vcl.ExtCtrls;

type
  TForm1 = class(TForm)
    PortSelector: TComboBox;
    Button1: TButton;
    Log: TMemo;
    Button2: TButton;
    Timer1: TTimer;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
  private
    procedure PortsUpd;
    function SendString(const Str: AnsiString): Boolean;
    procedure ReceiveData(Sender: TObject; Buffer: PAnsiChar;
      BufferLength: Word);
  public

  end;

var
  Form1: TForm1;
  ComPort: TComm;

implementation

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
begin
  if (not ComPort.PortOpen) then
  begin
    if PortSelector.Text = '' then
      Log.Lines.Add('Error:Serial port not exist.')
      // MessageBox(0,'Error:Serial port not exist.','ERROR!',MB_OK or MB_ICONERROR)
    else
    begin
      ComPort.CommName := PortSelector.Text;
      ComPort.StartComm;
      if ComPort.PortOpen then
      begin
        Log.Lines.Add('Note: Connected to serial port.');
        SendString('0');
        SendString('1');
        SendString('2');
      end
      else
      begin
        Log.Lines.Add('Error: Serial port connect failed.');
      end;
    end;
  end
  else
  begin
    ComPort.StopComm;
    if (not ComPort.PortOpen) then
    begin
      Button1.Click;
    end
    else
      Log.Lines.Add('Error: Serial port disconnect failed.');
  end;
  // SendString('1');
end;

procedure TForm1.Button2Click(Sender: TObject);
var
  Data: CORE_TEMP_SHARED_DATA;
  I: integer;
  Temp: Single;
begin
  if fnGetCoreTempInfo(Data) then
  begin
    for I := 0 to Data.uiCoreCnt - 1 do
    begin
      Temp := Temp + Data.fTemp[I];
    end;
    Log.Lines.Add(FloatToStrF((Temp / (Data.uiCoreCnt)), ffFixed, 7, 0));
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  ComPort := TComm.Create(Self);
  ComPort.OnReceiveData := ReceiveData;
  Log.Clear;
  PortsUpd;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  ComPort.StopComm;
  ComPort.Free;
end;

procedure TForm1.PortsUpd;
var
  R: TRegistry;
  buf: TStringList;
  I: integer;
begin
  R := TRegistry.Create;
  R.RootKey := HKEY_LOCAL_MACHINE;
  R.OpenKeyReadOnly('hardware\devicemap\serialcomm');
  buf := TStringList.Create;
  R.GetValueNames(buf);
  for I := 0 to buf.Count - 1 do
    buf.Strings[I] := R.ReadString(buf.Strings[I]);
  PortSelector.Clear;
  PortSelector.Items.Assign(buf);
  R.Free;
  buf.Free;
end;

procedure TForm1.ReceiveData(Sender: TObject; Buffer: PAnsiChar;
  BufferLength: Word);
begin
  case IndexStr(Buffer, ['0', '1']) of
    0:
      Log.Lines.Add('Note: Fan is off.');
    1:
      Log.Lines.Add('Note: Fan is on.');
  else
    Log.Text := Log.Text + Buffer;
  end;
end;

function TForm1.SendString(const Str: AnsiString): Boolean;
begin
  Result := ComPort.WriteCommData(PAnsiChar(Str), Length(Str));
end;

procedure TForm1.Timer1Timer(Sender: TObject);
var
  Data: CORE_TEMP_SHARED_DATA;
  I: integer;
  Temp: Single;
begin
  if fnGetCoreTempInfo(Data) then
  begin
    for I := 0 to Data.uiCoreCnt - 1 do
    begin
      Temp := Temp + Data.fTemp[I];
    end;
    Log.Lines.Add('Note: Temperature ' + FloatToStrF((Temp / (Data.uiCoreCnt)),
      ffFixed, 7, 0) + 'C');
  end;
end;

end.
